import numpy as np
import matplotlib.pyplot as plt




# --- Paramètres physiques :
m    = 1. # Masse de la particule
hbar = 1. # Constante de Plank
xmax = 30 # Étendue maximale du domaine
nx   = 501
dx   = (2*xmax+1)/nx
x    = np.linspace(-xmax,xmax,nx)
nt   = 400
tmax = 0.01
times = np.linspace(0,tmax,nt)
dt   = tmax/nt




# --- Fonctions : 
def initial_condition(x) :
    omega = 10
    beta = (m*omega/hbar)
    psi_0 =  ((beta/np.pi)**(0.25) * np.exp(-beta*(x-12)**2/2)).reshape(nx,1)
    return psi_0/np.linalg.norm(psi_0)


def potential(x) :
    # Potentiel harmonique :
    #omega = 0.08
    #return 0.5*m*omega**2*x**2
    # Puit infini :
    return np.where((x<10)*(x>-10),np.zeros(len(x)),1000)


def hamiltonian_operator(x) :
    H = np.zeros((len(x),len(x)))
    for i,Vx in enumerate(potential(x)) :
        H[i,i] = hbar**2/(m*dx**2) + Vx
        if (i<len(x)-1): H[i,i+1] = -hbar**2/(2*m*dx**2)
        if i>0         : H[i,i-1] = -hbar**2/(2*m*dx**2)
    return H


def euler_timestep(psi,H,dt=dt) :
    psi_out = psi - 1j*dt*H.dot(psi)/hbar
    return psi_out


def leapfrog_timestep(psi,H) :
    RePsi_init   = psi.real
    ImPsi_init   = psi.imag
    ImPsi_half   = ImPsi_init + (dt/2)*H.dot(RePsi_init)/(1j*hbar)
    RePsi_second = RePsi_init + (dt)  *H.dot(ImPsi_half)/(1j*hbar)
    ImPsi_second = ImPsi_half + (dt/2)*H.dot(RePsi_second)/(1j*hbar)
    return RePsi_second + 1j*ImPsi_second
    
psi = initial_condition(x)
H = hamiltonian_operator(x)

# --- Run

for i in range(1000) :
    psi = leapfrog_timestep(psi,H)
    if i%10==0 :
        plt.plot(x,psi.real)

plt.show()
        
