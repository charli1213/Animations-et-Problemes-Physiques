# === Imporation des modules :
import numpy as np
from scipy.sparse import linalg
import matplotlib.pyplot as plt
from matplotlib import animation
import matplotlib as mpl
mpl.rcParams['lines.linewidth'] = 0.4

# --- Paramètres physiques :
m    = 1. # Masse de la particule
hbar = 1. # Constante de Plank
xmax = 20 # Étendue maximale du domaine
nx   = 301
dx   = (2*xmax+1)/nx
x    = np.linspace(-xmax,xmax,nx)
nt   = 400
tmax = 200
times = np.linspace(0,tmax,nt)
dt   = tmax/nt
k = 0.1


# --- Fonctions : 
def hamiltonien(x) :
    """ Crée la matrice carrée de l'Hamiltonien de l'équation de Schrodinger """   
    H = np.zeros((len(x),len(x)))
    for i,xpos in enumerate(x) :
        H[i,i] = hbar**2/(m*dx**2) + (k)**2*xpos**2
        if (i<len(x)-1): H[i,i+1] = -hbar**2/(2*m*dx**2)
        if i>0         : H[i,i-1] = -hbar**2/(2*m*dx**2)
    return H


def solution_temporelle(t_vec,E_i) :
    """
    Calcul de la partie temporelle de la solution de Schrodinger,
    à l'aide des valeur propres (Énergies de l'hamiltonien).
    """
    times    = t_vec.reshape(1,len(t_vec))
    energies = E_i.reshape(len(E_i),1)
    argument = energies.dot(times)
    return np.exp(-1j*argument/hbar)
    
    
# ==== calculs ====
# --- Solution de l'opérateur linéaire. 
iHmin = 0
iHmax = 12
H           = hamiltonien(x)
E_i, psi_ix = linalg.eigs(H,which='SR')
phi_it      = solution_temporelle(times,E_i)
### À noter : scipy.linalg.eig() 'bug' vraiment beaucoup.


# --- Séparation (fusion) des variables et normalisation.
psi = np.array([psi_ix[:,i:i+1].dot(phi_it[i:i+1,:]) for i,E in enumerate(E_i)])[iHmin:iHmax].sum(axis=0)
psi = psi/np.linalg.norm(psi[:,0]) # normalisation
Prob = np.sqrt((psi*psi.conjugate()).real) # Probabilité


# ==== Animation ====
# --- Création de la figure 
fig = plt.figure(figsize = (7,5))
plt.plot(x, (k)**2*x**2-0.1,label = r'$V(x)$'  ,c='k',linestyle = 'dashed')
imP, = plt.plot(x,Prob[:,0],label = r'$|\psi(x,t)|$',c='r')
imR, = plt.plot(x,psi.real[:,0],label = r'$\mathrm{Re}\lbrace \psi(x,t)\rbrace$'  ,c='b')
im_text = plt.text(10,-0.255,"Temps = 0 s", zorder = 4)
plt.ylim(-0.3,0.3)
plt.xlim(-20,20)

# --- Fonctions d'animation
def init() :
    imR.set_data(x,psi.real[:,0])
    imP.set_data(x,Prob[:,0])
    im_text.set_text("Temps = {} s".format(0))
    return imR, imP, im_text

def animate(it) :
    imR.set_data(x,psi.real[:,it])
    imP.set_data(x,Prob[:,it])
    im_text.set_text("Temps = {} s".format(it*dt))
    return imR, imP, im_text

# --- Création de l'animation
anim = animation.FuncAnimation(fig, animate, init_func=init,
                               frames=nt, interval=50, repeat = True)
plt.legend(loc = 'upper right')
#plt.tight_layout()
fig.show()



